{% macro simpleTypes(simpleFields) %}
{%for f in simpleFields %}
{{f.code}} : {
    type: "{{f.type}}";
    value: string;
}{{";" if not loop.last}}
{% endfor %}
{%endmacro%}

{%macro stringListTypes(stringListFields) %}
{% for s in stringListFields %}
{{s.code}} : {
    type: "{{s.type}}";
    value : string[];
}{{";" if not loop.last}}
{% endfor %}
{% endmacro %}

{% macro userFieldTypes(userFields) %}
{% for u in userFields %}
{{u.code}} : {
    type: "{{u.type}}";
    value: {code: string, name: string};
}{{";" if not loop.last}}
{% endfor %}
{%endmacro%}

{%macro userListFieldType(userListFields) %}
{% for u in userListFields %}
{{u.code}} : {
    type: "{{u.type}}";
    value: {code: string, name: string}[];
}{{";" if not loop.last}}
{% endfor %}
{%endmacro%}

{%macro fileFieldTypes(fileTypeFields) %}
{% for f in fileTypeFields %}
{{f.code}} : {
    type: "{{f.type}}";
    value: {
        contentType: string;
        fileKey: string;
        name: string;
        size: string;
    }
}{{";" if not loop.last}}
{% endfor %}
{%endmacro%}

{%macro flatTypes(simpleFields, userFields, stringListFields, userListFields, fileTypeFields) %}
{{simpleTypes(simpleFields) }}

{{ ";" if stringListFields | length }}
{{ stringListTypes(stringListFields) }}

{{ ";" if userFields | length }}
{{userFieldTypes(userFields) }}

{{ ";" if userListFields | length }}
{{userListFieldType(userListFields) }}

{{ ";" if fileTypeFields | length }}
{{fileFieldTypes(fileTypeFields) }}
{%endmacro%}
/**
 * This type definition is auto-generated.
 * If you update kintone form settings, Please regenerate this type definition
 */
declare namespace {{namespace}} {
    interface {{typeName}} {

        {{flatTypes(simpleFields, userFields, stringListFields, userListFields, fileTypeFields) }}
        {{";" if subTableFields | length }}

        {% for rowcode, row in subTableFields %}
        {{rowcode}} : {
            type: "SUBTABLE";
            value: {
                id: string;
                value: {                  
                    {{ flatTypes(row.simpleFields, row.userFields, row.stringListFields, row.userListFields, row.fileTypeFields) }}
                };
            }[];
        }{{";" if not loop.last}}
        {% endfor %}
    }

    interface {{savedTypeName}} extends {{typeName}} {
        $id : {
            type: "__ID__";
            value: string;
        };
        $revision: {
            type: "__REVISION__";
            value: string;
        };
    }

    namespace events {

        namespace record.create.show {
            interface Event {
                appId: Number;
                record: {{fqdnTypeName}};
                reuse: boolean;
                type: string;
            }
        }
        

        namespace record.create.submit {
            interface Event {
                appId: Number;
                record: {{fqdnTypeName}};
            }
        }

        namespace record.create.submit.success {
            interface Event {
                appId: Number;
                recordId: Number;
                record: {{savedFqdnTypeName}};
            }
        }

        namespace record.create.change {
            interface Event {
                appId: Number;
                record: {{fqdnTypeName}};
                changes: {
                    field: any;
                    row: any;
                }
            }
        }

        namespace record.edit.show {
            interface Event {
                appId: Number;
                recordId: Number;
                record: {{savedFqdnTypeName}};
            }
        }

        namespace record.edit.submit {
            interface Event extends record.edit.show.Event {};
        }

        namespace record.edit.submit.success { 
            interface Event extends record.edit.show.Event {};
        }

        namespace record.index.edit.show {
            interface Event extends record.edit.show.Event {};
        }
        
        namespace record.edit.submit.change {
            interface Event {
                appId: Number;
                record: {{savedFqdnTypeName}};
                recordId: Number;
                changes: {
                    field: any;
                    row: any;
                }
            }
        }

        namespace record.index.edit.change {
            interface Event {
                appId: Number;
                record: {{savedFqdnTypeName}};
                recordId: Number;
                changes: {
                    field: any;
                };
            }
        }

        namespace record.detail.deleteSubmit {
            interface Event {
                appId: Number;
                recordId: Number;
                record: {{savedFqdnTypeName}};
            }
        }

        namespace record.index.deleteSubmit {
            interface Event {
                appId: Number;
                record: {{savedFqdnTypeName}};
                recordId: Number;
            }
        }

        namespace record.detail.process.proceed {
            interface Event {
                action: {
                    value: string;
                };
                status: {
                    value:string;
                };
                nexStatus: {
                    value:string;
                };
                record: {{savedFqdnTypeName}};
            }
        }
    }
};
